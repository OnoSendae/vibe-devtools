import fs from 'node:fs/promises';
import { existsSync } from 'node:fs';
import path from 'node:path';
import os from 'node:os';
import { BaseAdapter, TargetPaths, VibePackage } from './base-adapter.js';

interface MarkdownParsed {
    frontmatter: Record<string, string>;
    body: string;
}

function parseMarkdown(content: string): MarkdownParsed {
    const frontmatterRegex = /^---\s*\n([\s\S]*?)\n---\s*\n([\s\S]*)$/;
    const match = content.match(frontmatterRegex);

    if (!match) {
        return {
            frontmatter: {},
            body: content.trim()
        };
    }

    const frontmatterText = match[1];
    const body = match[2].trim();

    const frontmatter: Record<string, string> = {};
    const lines = frontmatterText.split('\n');

    for (const line of lines) {
        const colonIndex = line.indexOf(':');
        if (colonIndex === -1) continue;

        const key = line.substring(0, colonIndex).trim();
        const value = line.substring(colonIndex + 1).trim();

        frontmatter[key] = value;
    }

    return { frontmatter, body };
}

export class CopilotAdapter extends BaseAdapter {
    getName(): string {
        return 'github-copilot';
    }

    async detect(): Promise<boolean> {
        const vscodeExtPath = path.join(os.homedir(), '.vscode/extensions');

        try {
            const files = await fs.readdir(vscodeExtPath);
            return files.some(f => f.startsWith('github.copilot'));
        } catch {
            return false;
        }
    }

    getTargetPaths(): TargetPaths {
        return {
            prompts: '.github/prompts'
        };
    }

    async install(vibe: VibePackage, targetDir: string): Promise<void> {
        await this.createPrompts(vibe, targetDir);
    }

    private async createPrompts(
        vibe: VibePackage,
        targetDir: string
    ): Promise<void> {
        const promptsDir = path.join(targetDir, '.github/prompts');
        await fs.mkdir(promptsDir, { recursive: true });

        await this.createProjectPrompt(vibe, promptsDir);
        await this.createCommandPrompts(vibe, promptsDir);
        await this.createRulesPrompt(vibe, promptsDir);
    }

    private async createProjectPrompt(
        vibe: VibePackage,
        promptsDir: string
    ): Promise<void> {
        const projectPromptPath = path.join(promptsDir, 'project.prompt.md');

        let content = `---\n`;
        content += `applyTo:\n`;
        content += `  - "**/*"\n`;
        content += `---\n\n`;
        content += `# ${vibe.name} - Project Prompt\n\n`;
        content += `*Generated by vibe-devtools*\n\n`;
        content += `This workspace uses **${vibe.name}** vibe package.\n\n`;

        const cmdsDir = path.join(vibe.path, '.cursor/commands');
        if (existsSync(cmdsDir)) {
            const files = await fs.readdir(cmdsDir);
            const commands = files.filter(f => f.endsWith('.md'));

            if (commands.length > 0) {
                content += `## Available Commands\n\n`;
                content += `The following workflow commands are available (use / to invoke):\n\n`;

                for (const file of commands) {
                    const cmdPath = path.join(cmdsDir, file);
                    const cmdContent = await fs.readFile(cmdPath, 'utf-8');
                    const { frontmatter } = parseMarkdown(cmdContent);

                    const cmdName = file.replace(/\.md$/, '');
                    const description = frontmatter.description || 'Workflow command';

                    content += `- **/${cmdName}**: ${description}\n`;
                }

                content += `\n`;
                content += `To use a command, invoke it with / (e.g., "/research.deep" for research workflow).\n\n`;
            }
        }

        await fs.writeFile(projectPromptPath, content);
    }

    private async createCommandPrompts(
        vibe: VibePackage,
        promptsDir: string
    ): Promise<void> {
        const cmdsDir = path.join(vibe.path, '.cursor/commands');
        if (!existsSync(cmdsDir)) return;

        const files = await fs.readdir(cmdsDir);

        for (const file of files) {
            if (!file.endsWith('.md')) continue;

            const cmdPath = path.join(cmdsDir, file);
            const cmdContent = await fs.readFile(cmdPath, 'utf-8');
            const { frontmatter, body } = parseMarkdown(cmdContent);

            const cmdName = file.replace(/\.md$/, '');
            const promptPath = path.join(promptsDir, `${cmdName}.prompt.md`);

            let content = `# ${cmdName} Command Prompt\n\n`;
            
            if (frontmatter.description) {
                content += `**Description**: ${frontmatter.description}\n\n`;
            }

            content += `## Command Details\n\n`;
            content += `${body}\n\n`;

            await fs.writeFile(promptPath, content);
        }
    }

    private async createRulesPrompt(
        vibe: VibePackage,
        promptsDir: string
    ): Promise<void> {
        const rulesDir = path.join(vibe.path, '.cursor/rules');
        if (!existsSync(rulesDir)) return;

        const ruleFiles = await fs.readdir(rulesDir);
        if (ruleFiles.length === 0) return;

        const rulesPromptPath = path.join(promptsDir, 'rules.prompt.md');

        let content = `---\n`;
        content += `applyTo:\n`;
        content += `  - "**/*"\n`;
        content += `---\n\n`;
        content += `# ${vibe.name} - Coding Guidelines and Best Practices\n\n`;
        content += `*Generated by vibe-devtools*\n\n`;

        for (const file of ruleFiles) {
            const rulePath = path.join(rulesDir, file);
            const ruleContent = await fs.readFile(rulePath, 'utf-8');

            content += `## ${file.replace(/\.(md|mdc)$/, '')}\n\n`;
            content += `${ruleContent}\n\n`;
            content += `---\n\n`;
        }

        await fs.writeFile(rulesPromptPath, content);
    }

    async uninstall(vibe: VibePackage): Promise<void> {
        console.log(`Uninstalling ${vibe.name} from GitHub Copilot...`);
    }
}

