import fs from 'node:fs/promises';
import { existsSync } from 'node:fs';
import path from 'node:path';
import os from 'node:os';
import { BaseAdapter, TargetPaths, VibePackage } from './base-adapter.js';

interface MarkdownParsed {
    frontmatter: Record<string, string>;
    body: string;
}

function parseMarkdown(content: string): MarkdownParsed {
    const frontmatterRegex = /^---\s*\n([\s\S]*?)\n---\s*\n([\s\S]*)$/;
    const match = content.match(frontmatterRegex);

    if (!match) {
        return {
            frontmatter: {},
            body: content.trim()
        };
    }

    const frontmatterText = match[1];
    const body = match[2].trim();

    const frontmatter: Record<string, string> = {};
    const lines = frontmatterText.split('\n');

    for (const line of lines) {
        const colonIndex = line.indexOf(':');
        if (colonIndex === -1) continue;

        const key = line.substring(0, colonIndex).trim();
        const value = line.substring(colonIndex + 1).trim();

        frontmatter[key] = value;
    }

    return { frontmatter, body };
}

export class CopilotAdapter extends BaseAdapter {
    getName(): string {
        return 'github-copilot';
    }

    async detect(): Promise<boolean> {
        const vscodeExtPath = path.join(os.homedir(), '.vscode/extensions');

        try {
            const files = await fs.readdir(vscodeExtPath);
            return files.some(f => f.startsWith('github.copilot'));
        } catch {
            return false;
        }
    }

    getTargetPaths(): TargetPaths {
        return {
            instructions: '.github/copilot-instructions.md'
        };
    }

    async install(vibe: VibePackage, targetDir: string): Promise<void> {
        await this.createInstructions(vibe, targetDir);
    }

    private async createInstructions(
        vibe: VibePackage,
        targetDir: string
    ): Promise<void> {
        const instPath = path.join(targetDir, '.github/copilot-instructions.md');

        let content = `# GitHub Copilot Instructions - ${vibe.name}\n\n`;
        content += `*Generated by vibe-devtools*\n\n`;

        const cmdsDir = path.join(vibe.path, '.cursor/commands');
        if (existsSync(cmdsDir)) {
            content += `## Commands Available\n\n`;
            content += `The following commands are available in this workspace:\n\n`;

            const files = await fs.readdir(cmdsDir);

            for (const file of files) {
                if (!file.endsWith('.md')) continue;

                const cmdPath = path.join(cmdsDir, file);
                const cmdContent = await fs.readFile(cmdPath, 'utf-8');
                const { frontmatter } = parseMarkdown(cmdContent);

                const cmdName = file.replace(/\.md$/, '');
                const description = frontmatter.description || 'Command';

                content += `- **/${cmdName}**: ${description}\n`;
            }

            content += `\n`;
        }

        const rulesDir = path.join(vibe.path, '.cursor/rules');
        if (existsSync(rulesDir)) {
            content += `## Guidelines and Best Practices\n\n`;

            const ruleFiles = await fs.readdir(rulesDir);

            for (const file of ruleFiles) {
                const rulePath = path.join(rulesDir, file);
                const ruleContent = await fs.readFile(rulePath, 'utf-8');

                content += `### ${file}\n\n`;
                content += `${ruleContent}\n\n`;
            }
        }

        await fs.mkdir(path.dirname(instPath), { recursive: true });
        await fs.writeFile(instPath, content);
    }

    async uninstall(vibe: VibePackage): Promise<void> {
        console.log(`Uninstalling ${vibe.name} from GitHub Copilot...`);
    }
}

