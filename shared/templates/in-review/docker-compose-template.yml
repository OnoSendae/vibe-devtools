version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: [PROJECT_NAME]-postgres
    environment:
      POSTGRES_DB: [DATABASE_NAME]
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: [PROJECT_NAME]-backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/[DATABASE_NAME]
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-postgres}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: [PROJECT_NAME]-frontend
    environment:
      API_URL: http://backend:8080/api
    ports:
      - "4200:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge

