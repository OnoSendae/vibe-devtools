# Commands: Structure and Quality Standards

## Principle

TODOS os commands DEVEM seguir a estrutura universal definida em `template.commands.md`. Consist√™ncia absoluta garante predictabilidade, manutenibilidade e qualidade.

## Guidance

### DO (Fazer)

- **Usar Template Universal Obrigatoriamente**:
  - Template: `vibes/structure/templates/template.commands.md`
  - √â a √öNICA fonte de verdade para estrutura de commands
  - NUNCA criar estrutura divergente

- **Frontmatter YAML V√°lido**:
  ```yaml
  ---
  description: Uma linha clara descrevendo o que o command faz
  ---
  ```

- **Se√ß√£o User Input (Obrigat√≥ria)**:
  ```markdown
  ## Entrada do Usu√°rio
  
  ```text
  $ARGUMENTS
  ```
  
  Voc√™ **DEVE** considerar a entrada do usu√°rio antes de prosseguir.
  ```

- **Se√ß√£o Goal (Completa)**:
  - 2-3 par√°grafos explicando o command
  - **Quando usar**: Casos de uso claros
  - **Pr√©-requisitos**: Depend√™ncias expl√≠citas

- **Discovery & Validation (Se Input Pode Ser Vago)**:
  - Perguntas de esclarecimento
  - Valida√ß√µes de pr√©-requisitos
  - Checklist de informa√ß√µes necess√°rias

- **Execution Workflow (Fases Numeradas)**:
  - Fase 1: Validar inputs
  - Fases 2-N: Processamento
  - Fase N+1: Reportar resultados
  - M√≠nimo: 4 fases, M√°ximo razo√°vel: 10 fases

- **Operating Principles (Obrigat√≥rio)**:
  - Padr√µes de Qualidade
  - Tratamento de Erros
  - Restri√ß√µes (SEMPRE/NUNCA)

- **Examples (M√≠nimo 2)**:
  - Input bom ‚Üí Output esperado
  - Input com erro ‚Üí Tratamento adequado
  - Opcionalmente: Input complexo ‚Üí Output detalhado

- **Se√ß√£o Context (Ao Final)**:
  ```markdown
  ## Contexto
  
  $ARGUMENTS
  ```

- **Quality Checklist (Valida√ß√£o Final)**:
  - Lista de verifica√ß√µes obrigat√≥rias
  - M√≠nimo 5 itens
  - Espec√≠ficos ao command

### DON'T (N√£o Fazer)

- ‚ùå Omitir frontmatter
- ‚ùå Omitir se√ß√£o "Entrada do Usu√°rio"
- ‚ùå Omitir se√ß√£o "Contexto"
- ‚ùå Omitir examples
- ‚ùå Usar estrutura diferente do template
- ‚ùå Deixar placeholders `[CAPS]` sem preencher
- ‚ùå Criar command > 1000 linhas (refatorar se necess√°rio)
- ‚ùå Misturar linguagens (code em ingl√™s, texto em portugu√™s)
- ‚ùå Omitir tratamento de erros
- ‚ùå Usar linguagem vaga ("talvez", "possivelmente")

## Examples

### ‚úÖ Good Structure

```markdown
---
description: Buscar termo em arquivos do projeto com filtros e estat√≠sticas
---

## Entrada do Usu√°rio

```text
$ARGUMENTS
```

Voc√™ **DEVE** considerar a entrada do usu√°rio antes de prosseguir.

## Objetivo

Buscar termo em arquivos do projeto...

**Quando usar**: Quando precisa encontrar c√≥digo espec√≠fico.

**Pr√©-requisitos**: 
- Projeto com arquivos para buscar
- Termo de busca definido

## Fluxo de Execu√ß√£o

### Fase 1: Validar Input

1. Parsear argumentos
2. Validar termo n√£o vazio

### Fase 2: Executar Busca

1. Usar grep tool
2. Processar resultados

### Fase 3: Formatar Output

1. Gerar estat√≠sticas
2. Formatar resultados

## Princ√≠pios Operacionais

### Padr√µes de Qualidade

- Performance: Usar grep (r√°pido)
- Contexto: Sempre mostrar linhas ao redor

### Tratamento de Erros

- Se termo vazio: ERRO e aguardar
- Se nenhum match: Informar "0 resultados"

### Restri√ß√µes

- SEMPRE usar grep tool
- SEMPRE mostrar estat√≠sticas
- NUNCA limitar resultados sem avisar

## Exemplos

### Input Bom ‚Üí Output

```
Input: /search.simple "async function"

Output:
üîç Busca: "async function"
üìä Estat√≠sticas: 42 matches em 15 arquivos
```

## Contexto

$ARGUMENTS

## Checklist de Qualidade

- [ ] Termo validado
- [ ] grep utilizado
- [ ] Estat√≠sticas calculadas
- [ ] Resultados formatados
```

### ‚ùå Bad Structure

```markdown
# Search Command

Searches for stuff.

Usage: /search [term]

That's it.
```

**Problemas**:
- ‚ùå Sem frontmatter
- ‚ùå Sem se√ß√£o User Input
- ‚ùå Sem Execution Workflow
- ‚ùå Sem Examples
- ‚ùå Sem Context
- ‚ùå Sem Checklist
- ‚ùå Vago ("stuff")

## Rationale

**Template Universal**: Garante que todos os commands sejam imediatamente compreens√≠veis por qualquer developer/AI.

**Se√ß√µes Obrigat√≥rias**: Previne omiss√µes que levam a commands incompletos ou amb√≠guos.

**Execution Workflow em Fases**: Torna fluxo claro, test√°vel e debug√°vel.

**Examples**: Documenta√ß√£o viva que mostra uso real.

**Checklist**: Valida que command foi completamente implementado.

## Enforcement

### Automated (via maker.command)

- Carregar `template.commands.md` como √öNICA refer√™ncia
- Validar todas se√ß√µes obrigat√≥rias presentes
- Verificar nenhum placeholder `[CAPS]` n√£o resolvido
- Validar frontmatter YAML syntax

### Manual (Code Review)

- Verificar clareza do Goal
- Validar examples s√£o realistas
- Confirmar error handling adequado

## References

- Template Universal: `vibes/structure/templates/template.commands.md`
- Framework QUEST: Documentado em `maker.command.md`
- Constitution: `vibes/configs/constitution.md`
